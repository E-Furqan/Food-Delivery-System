definitions:
  model.AssignDeliveryDriver:
    properties:
      activeRole:
        type: string
      delivery_driver:
        type: integer
      order_id:
        type: integer
    type: object
  model.CombineOrderItem:
    properties:
      delivery_driver:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.OrderItemPayload'
        type: array
      order_id:
        type: integer
      restaurant_id:
        type: integer
      user_id:
        type: integer
    type: object
  model.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  model.Filter:
    properties:
      column_name:
        type: string
      sort_order:
        type: string
    type: object
  model.ID:
    properties:
      delivery_driver:
        type: integer
      order_id:
        type: integer
      restaurant_id:
        type: integer
      user_id:
        type: integer
    type: object
  model.Item:
    properties:
      item_id:
        type: integer
    type: object
  model.Order:
    properties:
      delivery_driver:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.Item'
        type: array
      order_id:
        type: integer
      order_status:
        type: string
      restaurant_id:
        type: integer
      time:
        type: string
      total_bill:
        type: number
      user_id:
        type: integer
    type: object
  model.OrderItemPayload:
    properties:
      item_id:
        type: integer
      quantity:
        type: integer
    type: object
  model.OrderStatusUpdateRequest:
    properties:
      activeRole:
        type: string
      delivery_driver:
        type: integer
      order_id:
        type: integer
      order_status:
        type: string
      restaurant_id:
        type: integer
      user_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /order/assign/diver:
    patch:
      consumes:
      - application/json
      description: Assigns a delivery driver to an order if the order doesn't already
        have a driver, and the role of the user is "delivery driver"
      parameters:
      - description: Assign delivery driver request
        in: body
        name: assignDeliveryDriverRequest
        required: true
        schema:
          $ref: '#/definitions/model.AssignDeliveryDriver'
      produces:
      - application/json
      responses:
        "200":
          description: Assigned delivery driver to the order
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      summary: Assign a delivery driver to an order
      tags:
      - Order Service
  /order/generate/invoice:
    get:
      consumes:
      - application/json
      description: Generates an invoice for the order based on order ID and user validation
      parameters:
      - description: Order ID JSON
        in: body
        name: orderId
        required: true
        schema:
          $ref: '#/definitions/model.ID'
      produces:
      - application/json
      responses:
        "200":
          description: invoice
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Generate an invoice for a specific order
      tags:
      - Order Service
  /order/place/order:
    post:
      consumes:
      - application/json
      description: Allows a customer to place an order, including selecting items
        from a restaurant and calculating the total bill
      parameters:
      - description: Place order request
        in: body
        name: placeOrderRequest
        required: true
        schema:
          $ref: '#/definitions/model.CombineOrderItem'
      produces:
      - application/json
      responses:
        "200":
          description: Order placed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Place an order as a customer
      tags:
      - Order Service
  /order/update/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of an order based on the role of the user (customer,
        restaurant, or delivery driver)
      parameters:
      - description: Order status update request
        in: body
        name: orderStatusUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/model.OrderStatusUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated order details
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      summary: Update the status of an order
      tags:
      - Order Service
  /order/view/{UserType}/orders:
    get:
      description: Retrieves orders filtered by user type, sorted by specified column
        and order.
      parameters:
      - description: User ID from Claims
        in: header
        name: ID
        required: true
        type: integer
      - description: 'Type of user: user, restaurant, or delivery driver'
        in: path
        name: UserType
        required: true
        type: string
      - description: Sorting details
        in: body
        name: Filter
        required: true
        schema:
          $ref: '#/definitions/model.Filter'
      responses:
        "200":
          description: List of Orders
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Error occurred
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get orders based on user type (user, restaurant, or delivery driver)
      tags:
      - Order Service
  /order/view/driver/orders:
    get:
      description: Allows only driver or admins to view their orders.
      parameters:
      - description: Active Role of the User
        in: header
        name: activeRole
        required: true
        type: string
      responses:
        "200":
          description: List of Orders
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Only driver or admin can view the orders
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get driver orders
      tags:
      - Order Service
  /order/view/order:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about an order by order ID
      parameters:
      - description: Order ID JSON
        in: body
        name: orderId
        required: true
        schema:
          $ref: '#/definitions/model.ID'
      produces:
      - application/json
      responses:
        "200":
          description: Order details
          schema:
            $ref: '#/definitions/model.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            type: string
      summary: View details of a specific order
      tags:
      - Order Service
  /order/view/restaurant/orders:
    get:
      description: Allows only restaurant or admins to view their orders.
      parameters:
      - description: Active Role of the User
        in: header
        name: activeRole
        required: true
        type: string
      responses:
        "200":
          description: List of Orders
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Only restaurant or admin can view the orders
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get restaurant orders
      tags:
      - Order Service
  /order/view/user/orders:
    get:
      description: Allows only customers or admins to view their orders.
      parameters:
      - description: Active Role of the User
        in: header
        name: activeRole
        required: true
        type: string
      responses:
        "200":
          description: List of Orders
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Only customer or admin can view the orders
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user orders
      tags:
      - Order Service
  /view/without/driver/orders:
    get:
      description: Retrieves orders that have not been assigned a delivery driver.
        Only accessible to users with roles "delivery driver" or "admin".
      produces:
      - application/json
      responses:
        "200":
          description: List of orders without assigned delivery driver
          schema:
            items:
              $ref: '#/definitions/model.Order'
            type: array
        "400":
          description: Bad request, role ID missing or unauthorized access
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Orders not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get orders without assigned delivery driver
      tags:
      - Order Service
swagger: "2.0"
